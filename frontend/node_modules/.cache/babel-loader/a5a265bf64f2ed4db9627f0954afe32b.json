{"ast":null,"code":"import Cookies from \"js-cookie\";\nimport qs from 'qs';\nconst BASEAPI = 'http://localhost:5000'; // envaindo dados para o webservice via POST\n\nconst apiFetchPost = async (endpoint, body) => {\n  // verifica se não tem um token junto no body (corpo da mensagem), neste caso ele busca\n  // nos Cookies pelo token e agrega junto no body\n  if (!body.token) {\n    let token = Cookies.get('token');\n\n    if (token) {\n      body.phone = \"4899268079\";\n      body.token = token;\n    }\n  } // cria uma constante de comunicação com o webservice envaindo o endereço (BASEAPI) + a rota (endpoint)\n  // enviando os dados para o webservice\n\n\n  const res = await fetch(BASEAPI + endpoint, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  }); // a const json recebe a resposta de um json vindo do webservice\n\n  const json = await res.json(); // se nessa resposta tiver um parâmetro chamado notallowed, é pq deu algum erro\n  // este notallowed vem do backend de um middlewares chamado Auth.js, que é o teste de privacidade de uma rota.\n\n  if (json.notallowed) {\n    window.location.href = '/login';\n    return;\n  } // se não tiver o notallowed, a resposta do webservice é retornada\n\n\n  return json;\n}; // o processo de GET é muito semelhante ao do POST, a diferença que uma URL é enviada para o webservice\n\n\nconst apiFetchGet = async (endpoint, body = []) => {\n  // verifica se não tem um token junto no body (corpo da mensagem), neste caso ele busca\n  // nos Cookies pelo token e agrega junto no body\n  if (!body.token) {\n    let token = Cookies.get('token');\n\n    if (token) {\n      body.token = token;\n    }\n  } // cria a url e o fetch faz essa requisição\n\n\n  const res = await fetch(`${BASEAPI + endpoint}?${qs.stringify(body)}`); // o res passa a resposta json() para a const json\n\n  const json = await res.json(); // se nessa resposta tiver um parâmetro chamado notallowed, é pq deu algum erro\n  // este notallowed vem do backend de um middlewares chamado Auth.js, que é o teste de privacidade de uma rota.\n\n  if (json.notallowed) {\n    window.location.href = '/login';\n    return;\n  } // se não tiver o notallowed, a resposta do webservice é retornada\n\n\n  return json;\n}; // Esta API faz a conexão com as páginas, ela recebe os parâmetros vindo do HTML e envia para\n// o apiFetchPost ou apiFetchGet com a rota correta e os parâmetros que recebeu.\n\n\nconst AmorinhaAPI = {\n  login: async (email, password) => {\n    const json = await apiFetchPost('/user/login', {\n      email,\n      password\n    });\n    return json;\n  },\n  signup: async (name, email, password) => {\n    const json = await apiFetchPost('/user/signup', {\n      name,\n      email,\n      password\n    });\n    return json;\n  },\n  userInfo: async token => {\n    const json = await apiFetchPost('/user/info', {\n      token\n    });\n    return json;\n  },\n  addStudent: async (name, birthDate, responsableName, phone, emergencyWarning, phoneEmergency, foodRestriction, descriptionFoodRestriction, imageAuthorization, authorizedPeople, schoolClass, additionalNotes) => {\n    const json = await apiFetchPost('/student/add', {\n      name,\n      birthDate,\n      responsableName,\n      phone,\n      emergencyWarning,\n      phoneEmergency,\n      foodRestriction,\n      descriptionFoodRestriction,\n      imageAuthorization,\n      authorizedPeople,\n      schoolClass,\n      additionalNotes\n    });\n    return json;\n  }\n};\nexport default (() => AmorinhaAPI);","map":{"version":3,"sources":["/home/jael/Dropbox/devinhouse/front/react/amorinha/frontend/src/helpers/AmorinhaAPI.js"],"names":["Cookies","qs","BASEAPI","apiFetchPost","endpoint","body","token","get","phone","res","fetch","method","headers","JSON","stringify","json","notallowed","window","location","href","apiFetchGet","AmorinhaAPI","login","email","password","signup","name","userInfo","addStudent","birthDate","responsableName","emergencyWarning","phoneEmergency","foodRestriction","descriptionFoodRestriction","imageAuthorization","authorizedPeople","schoolClass","additionalNotes"],"mappings":"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","sourcesContent":["import Cookies from \"js-cookie\";\nimport qs from 'qs';\n\nconst BASEAPI = 'http://localhost:5000';\n\n// envaindo dados para o webservice via POST\nconst apiFetchPost = async (endpoint, body) => {\n\n    // verifica se não tem um token junto no body (corpo da mensagem), neste caso ele busca\n    // nos Cookies pelo token e agrega junto no body\n    if (!body.token){\n        let token = Cookies.get('token');\n        if (token){\n            body.phone = \"4899268079\";\n            body.token = token;\n        }\n    }\n\n    // cria uma constante de comunicação com o webservice envaindo o endereço (BASEAPI) + a rota (endpoint)\n    // enviando os dados para o webservice\n    const res = await fetch(BASEAPI+endpoint, {\n        method:'POST',\n        headers:{\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body:JSON.stringify(body)\n    });\n\n    // a const json recebe a resposta de um json vindo do webservice\n    const json = await res.json();\n    \n    // se nessa resposta tiver um parâmetro chamado notallowed, é pq deu algum erro\n    // este notallowed vem do backend de um middlewares chamado Auth.js, que é o teste de privacidade de uma rota.\n    if (json.notallowed){\n        window.location.href = '/login';\n        return;\n    }\n\n    // se não tiver o notallowed, a resposta do webservice é retornada\n    return json;\n}\n\n// o processo de GET é muito semelhante ao do POST, a diferença que uma URL é enviada para o webservice\nconst apiFetchGet = async (endpoint, body = []) => {\n\n    // verifica se não tem um token junto no body (corpo da mensagem), neste caso ele busca\n    // nos Cookies pelo token e agrega junto no body\n    if (!body.token){\n        let token = Cookies.get('token');\n        if (token){\n            body.token = token;\n        }\n    }\n\n    // cria a url e o fetch faz essa requisição\n    const res = await fetch(`${BASEAPI+endpoint}?${qs.stringify(body)}`);\n\n    // o res passa a resposta json() para a const json\n    const json = await res.json();\n\n    // se nessa resposta tiver um parâmetro chamado notallowed, é pq deu algum erro\n    // este notallowed vem do backend de um middlewares chamado Auth.js, que é o teste de privacidade de uma rota.\n    if (json.notallowed){\n        window.location.href = '/login';\n        return;\n    }\n\n    // se não tiver o notallowed, a resposta do webservice é retornada\n    return json;\n}\n\n// Esta API faz a conexão com as páginas, ela recebe os parâmetros vindo do HTML e envia para\n// o apiFetchPost ou apiFetchGet com a rota correta e os parâmetros que recebeu.\nconst AmorinhaAPI = {\n    login: async (email, password) => {\n        const json = await apiFetchPost(\n            '/user/login',\n            {email, password}\n        );\n        \n        return json;\n    },\n\n    signup: async (name, email, password) => {\n        const json = await apiFetchPost(\n            '/user/signup',\n            { name, email, password }\n        );\n\n        return json;\n    },\n\n    userInfo: async (token) => {\n        const json = await apiFetchPost(\n            '/user/info',\n            {token}\n        );\n\n        return json;\n    },\n\n    addStudent: async (name, birthDate, responsableName, phone, emergencyWarning, phoneEmergency, foodRestriction, descriptionFoodRestriction, imageAuthorization, authorizedPeople, schoolClass, additionalNotes) => {\n        const json = await apiFetchPost(\n            '/student/add',\n            {name, birthDate, responsableName, phone, emergencyWarning, phoneEmergency, foodRestriction, descriptionFoodRestriction, imageAuthorization, authorizedPeople, schoolClass, additionalNotes}\n        );\n\n        return json;\n    }\n\n};\n\nexport default () => AmorinhaAPI;"]},"metadata":{},"sourceType":"module"}